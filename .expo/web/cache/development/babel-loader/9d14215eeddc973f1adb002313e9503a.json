{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Notifications } from 'expo';\nimport * as Permissions from 'expo-permissions';\nimport Constants from 'expo-constants';\nimport axios from 'axios';\nimport Bdd from \"../API/Bdd\";\nimport { _emitEvent, SocketService } from \"../services/socket\";\nexport var registerForPushNotificationsAsync = function registerForPushNotificationsAsync(user) {\n  var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status, token, socketSrv;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context.next = 22;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 3:\n          _await$Permissions$ge = _context.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 9:\n          _await$Permissions$as = _context.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context.abrupt(\"return\");\n\n        case 15:\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context.sent;\n          socketSrv = new SocketService(\"samaritain\");\n          socketSrv.emitEvent(\"sendingExpoToken\", {\n            token: token,\n            user: user\n          });\n          _context.next = 23;\n          break;\n\n        case 22:\n          alert('Must use physical device for Push Notifications');\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["E:/Projets/Acadys/best4sante/SanteV2/assets/services/notifications.js"],"names":["Notifications","Permissions","Constants","axios","Bdd","_emitEvent","SocketService","registerForPushNotificationsAsync","user","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","token","socketSrv","emitEvent"],"mappings":";AAAA,SAASA,aAAT,QAA8B,MAA9B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP;AACA,SAASC,UAAT,EAAqBC,aAArB;AAEA,OAAO,IAAMC,iCAAiC,GAAG,SAApCA,iCAAoC,CAAOC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eAE3CN,SAAS,CAACO,QAFiC;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAGJR,WAAW,CAACS,QAAZ,CACvCT,WAAW,CAACU,aAD2B,CAHI;;AAAA;AAAA;AAG7BC,UAAAA,cAH6B,yBAGrCC,MAHqC;AAMzCC,UAAAA,WANyC,GAM3BF,cAN2B;;AAAA,gBAOzCA,cAAc,KAAK,SAPsB;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAQlBX,WAAW,CAACc,QAAZ,CACvBd,WAAW,CAACU,aADW,CARkB;;AAAA;AAAA;AAQnCE,UAAAA,MARmC,yBAQnCA,MARmC;AAW3CC,UAAAA,WAAW,GAAGD,MAAd;;AAX2C;AAAA,gBAazCC,WAAW,KAAK,SAbyB;AAAA;AAAA;AAAA;;AAc3CE,UAAAA,KAAK,CAAC,iDAAD,CAAL;AAd2C;;AAAA;AAAA;AAAA,2CAiB3BhB,aAAa,CAACiB,qBAAd,EAjB2B;;AAAA;AAiBzCC,UAAAA,KAjByC;AAmB1CC,UAAAA,SAnB0C,GAmB9B,IAAIb,aAAJ,CAAkB,YAAlB,CAnB8B;AAqB7Ca,UAAAA,SAAS,CAACC,SAAV,CAAoB,kBAApB,EAAuC;AAACF,YAAAA,KAAK,EAAGA,KAAT;AAAgBV,YAAAA,IAAI,EAAGA;AAAvB,WAAvC;AArB6C;AAAA;;AAAA;AAyB7CQ,UAAAA,KAAK,CAAC,iDAAD,CAAL;;AAzB6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1C","sourcesContent":["import { Notifications } from 'expo';\r\nimport * as Permissions from 'expo-permissions';\r\nimport Constants from 'expo-constants';\r\nimport axios from 'axios';\r\nimport Bdd from '../API/Bdd'\r\nimport { _emitEvent, SocketService } from '../services/socket';\r\n\r\nexport const registerForPushNotificationsAsync = async (user) => {\r\n  \r\n  if (Constants.isDevice) {\r\n    const { status: existingStatus } = await Permissions.getAsync(\r\n      Permissions.NOTIFICATIONS\r\n    );\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Permissions.askAsync(\r\n        Permissions.NOTIFICATIONS\r\n      );\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== 'granted') {\r\n      alert('Failed to get push token for push notification!');\r\n      return;\r\n    }\r\n    let token = await Notifications.getExpoPushTokenAsync();\r\n   \r\n   let socketSrv = new SocketService(\"samaritain\")\r\n\r\n    socketSrv.emitEvent(\"sendingExpoToken\",{token : token, user : user})\r\n    \r\n    \r\n  } else {\r\n    alert('Must use physical device for Push Notifications');\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}