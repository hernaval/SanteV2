{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\Projets\\\\Acadys\\\\best4sante\\\\SanteV2\\\\node_modules\\\\react-native-dashboard\\\\Dashboard.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport GridView from 'react-native-super-grid';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width;\n\nvar RippleColor = function RippleColor() {\n  return Platform.Version >= 21 ? TouchableNativeFeedback.Ripple.apply(TouchableNativeFeedback, arguments) : null;\n};\n\nvar Dashboard = function (_Component) {\n  _inherits(Dashboard, _Component);\n\n  var _super = _createSuper(Dashboard);\n\n  function Dashboard() {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _super.call(this);\n    _this.state = {\n      width: width\n    };\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"onLayout\",\n    value: function onLayout(e) {\n      var _Dimensions$get2 = Dimensions.get('window'),\n          width = _Dimensions$get2.width;\n\n      this.setState({\n        width: width\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(!this.props.background);\n      var column = !this.props.column ? 2 : this.props.column;\n      var dim = this.state.width / column - 20;\n      return React.createElement(View, {\n        onLayout: this.onLayout.bind(this),\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }\n      }, React.createElement(GridView, {\n        itemDimension: dim,\n        items: this.props.items,\n        style: styles.gridView,\n        renderItem: function renderItem(item) {\n          return React.createElement(TouchableNativeFeedback, {\n            onPress: function onPress() {\n              _this2.props.card(item);\n            },\n            delayPressIn: 0,\n            delayPressOut: 0,\n            useForeground: true,\n            background: RippleColor('#fff'),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 13\n            }\n          }, React.createElement(View, {\n            style: [styles.itemContainer, {\n              backgroundColor: !item.background || !_this2.props.background ? '#fff' : item.background,\n              height: dim\n            }],\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }\n          }, React.createElement(Icon, {\n            name: item.icon,\n            size: 40,\n            color: !item.background || !_this2.props.background ? '#3498db' : '#fff',\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }\n          }), React.createElement(Text, {\n            style: [styles.itemName, {\n              color: !item.background || !_this2.props.background ? '#000' : '#fff'\n            }],\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }\n          }, item.name)));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nexport { Dashboard as default };\nvar styles = StyleSheet.create({\n  gridView: {\n    flex: 1\n  },\n  itemContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 5\n  },\n  itemName: {\n    fontSize: 16,\n    fontWeight: '600',\n    paddingTop: 10\n  }\n});","map":{"version":3,"sources":["E:/Projets/Acadys/best4sante/SanteV2/node_modules/react-native-dashboard/Dashboard.js"],"names":["React","Component","GridView","Icon","Dimensions","get","width","RippleColor","Platform","Version","TouchableNativeFeedback","Ripple","Dashboard","state","e","setState","console","log","props","background","column","dim","onLayout","bind","flex","items","styles","gridView","item","card","itemContainer","backgroundColor","height","icon","itemName","color","name","StyleSheet","create","justifyContent","alignItems","borderRadius","fontSize","fontWeight","paddingTop"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;AASA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,IAAP;;sBAEkBC,UAAU,CAACC,GAAX,CAAe,QAAf,C;IAAVC,K,mBAAAA,K;;AAER,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,SAClBC,QAAQ,CAACC,OAAT,IAAoB,EAApB,GAAyBC,uBAAuB,CAACC,MAAxB,OAAAD,uBAAuB,YAAhD,GAAmE,IADjD;AAAA,CAApB;;IAGqBE,S;;;;;AACnB,uBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXP,MAAAA,KAAK,EAAEA;AADI,KAAb;AAFY;AAKb;;;;6BAEQQ,C,EAAG;AAAA,6BACQV,UAAU,CAACC,GAAX,CAAe,QAAf,CADR;AAAA,UACFC,KADE,oBACFA,KADE;;AAEV,WAAKS,QAAL,CAAc;AAAET,QAAAA,KAAK,EAALA;AAAF,OAAd;AACD;;;6BAEQ;AAAA;;AACPU,MAAAA,OAAO,CAACC,GAAR,CAAY,CAAC,KAAKC,KAAL,CAAWC,UAAxB;AACA,UAAIC,MAAM,GAAG,CAAC,KAAKF,KAAL,CAAWE,MAAZ,GAAqB,CAArB,GAAyB,KAAKF,KAAL,CAAWE,MAAjD;AACA,UAAIC,GAAG,GAAG,KAAKR,KAAL,CAAWP,KAAX,GAAmBc,MAAnB,GAA4B,EAAtC;AACA,aACE,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAKE,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AAA0C,QAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,aAAa,EAAEH,GADjB;AAEE,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWO,KAFpB;AAGE,QAAA,KAAK,EAAEC,MAAM,CAACC,QAHhB;AAIE,QAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,iBACd,oBAAC,uBAAD;AACE,YAAA,OAAO,EAAE,mBAAM;AACb,cAAA,MAAI,CAACV,KAAL,CAAWW,IAAX,CAAgBD,IAAhB;AACD,aAHH;AAIE,YAAA,YAAY,EAAE,CAJhB;AAKE,YAAA,aAAa,EAAE,CALjB;AAME,YAAA,aAAa,EAAE,IANjB;AAOE,YAAA,UAAU,EAAErB,WAAW,CAAC,MAAD,CAPzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAQE,oBAAC,IAAD;AACE,YAAA,KAAK,EAAE,CACLmB,MAAM,CAACI,aADF,EAEL;AACEC,cAAAA,eAAe,EACb,CAACH,IAAI,CAACT,UAAN,IAAoB,CAAC,MAAI,CAACD,KAAL,CAAWC,UAAhC,GACI,MADJ,GAEIS,IAAI,CAACT,UAJb;AAKEa,cAAAA,MAAM,EAAEX;AALV,aAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAWE,oBAAC,IAAD;AACE,YAAA,IAAI,EAAEO,IAAI,CAACK,IADb;AAEE,YAAA,IAAI,EAAE,EAFR;AAGE,YAAA,KAAK,EACH,CAACL,IAAI,CAACT,UAAN,IAAoB,CAAC,MAAI,CAACD,KAAL,CAAWC,UAAhC,GACI,SADJ,GAEI,MANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,EAoBE,oBAAC,IAAD;AACE,YAAA,KAAK,EAAE,CACLO,MAAM,CAACQ,QADF,EAEL;AACEC,cAAAA,KAAK,EACH,CAACP,IAAI,CAACT,UAAN,IAAoB,CAAC,MAAI,CAACD,KAAL,CAAWC,UAAhC,GACI,MADJ,GAEI;AAJR,aAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAUGS,IAAI,CAACQ,IAVR,CApBF,CARF,CADc;AAAA,SAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAqDD;;;;EAtEoCnC,S;;SAAlBW,S;AAyErB,IAAMc,MAAM,GAAGW,UAAU,CAACC,MAAX,CAAkB;AAC/BX,EAAAA,QAAQ,EAAE;AACRH,IAAAA,IAAI,EAAE;AADE,GADqB;AAI/BM,EAAAA,aAAa,EAAE;AACbS,IAAAA,cAAc,EAAE,QADH;AAEbC,IAAAA,UAAU,EAAE,QAFC;AAGbC,IAAAA,YAAY,EAAE;AAHD,GAJgB;AAS/BP,EAAAA,QAAQ,EAAE;AACRQ,IAAAA,QAAQ,EAAE,EADF;AAERC,IAAAA,UAAU,EAAE,KAFJ;AAGRC,IAAAA,UAAU,EAAE;AAHJ;AATqB,CAAlB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  Dimensions,\n  Platform,\n  TouchableNativeFeedback,\n} from 'react-native';\nimport GridView from 'react-native-super-grid';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nconst { width } = Dimensions.get('window');\n\nconst RippleColor = (...args) =>\n  Platform.Version >= 21 ? TouchableNativeFeedback.Ripple(...args) : null;\n\nexport default class Dashboard extends Component {\n  constructor() {\n    super();\n    this.state = {\n      width: width,\n    };\n  }\n\n  onLayout(e) {\n    const { width } = Dimensions.get('window');\n    this.setState({ width });\n  }\n\n  render() {\n    console.log(!this.props.background);\n    var column = !this.props.column ? 2 : this.props.column;\n    var dim = this.state.width / column - 20;\n    return (\n      <View onLayout={this.onLayout.bind(this)} style={{ flex: 1 }}>\n        <GridView\n          itemDimension={dim}\n          items={this.props.items}\n          style={styles.gridView}\n          renderItem={item => (\n            <TouchableNativeFeedback\n              onPress={() => {\n                this.props.card(item);\n              }}\n              delayPressIn={0}\n              delayPressOut={0}\n              useForeground={true}\n              background={RippleColor('#fff')}>\n              <View\n                style={[\n                  styles.itemContainer,\n                  {\n                    backgroundColor:\n                      !item.background || !this.props.background\n                        ? '#fff'\n                        : item.background,\n                    height: dim,\n                  },\n                ]}>\n                <Icon\n                  name={item.icon}\n                  size={40}\n                  color={\n                    !item.background || !this.props.background\n                      ? '#3498db'\n                      : '#fff'\n                  }\n                />\n                <Text\n                  style={[\n                    styles.itemName,\n                    {\n                      color:\n                        !item.background || !this.props.background\n                          ? '#000'\n                          : '#fff',\n                    },\n                  ]}>\n                  {item.name}\n                </Text>\n              </View>\n            </TouchableNativeFeedback>\n          )}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  gridView: {\n    flex: 1,\n  },\n  itemContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 5,\n  },\n  itemName: {\n    fontSize: 16,\n    fontWeight: '600',\n    paddingTop: 10,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}