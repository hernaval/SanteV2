{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\Projets\\\\Acadys\\\\best4sante\\\\SanteV2\\\\assets\\\\Screens\\\\Samaritain\\\\MapUser.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PlaceList from \"../Place/PlaceList\";\nimport styles from \"../Map/styles\";\nimport HeaderMenu from \"../../component/Menu/HeaderMenu\";\nimport { connect } from \"react-redux\";\nimport { SocketService } from \"../../services/socket\";\nimport { onlineUser } from \"../../Action\";\nimport { getCurrentLocation } from \"../../services/location\";\nimport { Avatar } from \"react-native-elements\";\nimport google from \"../../API/google\";\n\nvar MapUser = function (_Component) {\n  _inherits(MapUser, _Component);\n\n  var _super = _createSuper(MapUser);\n\n  function MapUser(props) {\n    var _this;\n\n    _classCallCheck(this, MapUser);\n\n    _this = _super.call(this, props);\n\n    _this.getLocationAsync = function _callee() {\n      var location;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(getCurrentLocation());\n\n            case 2:\n              location = _context.sent;\n              console.log(\"location \", location);\n\n              _this.setState({\n                lat: location.coords.latitude,\n                long: location.coords.longitude\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.getUserConnected = function _callee3() {\n      var socketSrv;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              socketSrv = new SocketService(\"samaritain\");\n              socketSrv.onSamaritainListChange(function _callee2(userList) {\n                return _regeneratorRuntime.async(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _this.props.onlineUser(userList);\n\n                      case 1:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              });\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      lat: 48.858453,\n      long: 2.294489,\n      places: [],\n      isLoading: false,\n      placeType: \"pharmacy\"\n    };\n    _this.GOOGLE_API_KEY = google.cloud_key;\n    return _this;\n  }\n\n  _createClass(MapUser, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var navigation, placeType;\n      return _regeneratorRuntime.async(function componentDidMount$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(this.getUserConnected());\n\n            case 2:\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(this.getLocationAsync());\n\n            case 4:\n              navigation = this.props.navigation;\n              placeType = 'pharmacy';\n              this.setState({\n                placeType: placeType\n              });\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getCurrentLocation\",\n    value: function getCurrentLocation() {\n      var _this2 = this;\n\n      console.log('Get current location');\n      navigator.geolocation.getCurrentPosition(function (position) {\n        var lat = position.coords.latitude;\n        var long = position.coords.longitude;\n\n        _this2.setState({\n          lat: lat,\n          long: long\n        });\n\n        console.log(_this2.state);\n\n        _this2.getPlaces();\n      });\n    }\n  }, {\n    key: \"getPlaces\",\n    value: function getPlaces() {\n      var _this3 = this;\n\n      console.log('get places');\n      var _this$state = this.state,\n          lat = _this$state.lat,\n          long = _this$state.long,\n          placeType = _this$state.placeType;\n      var markers = [];\n      var url = this.getPlacesUrl(lat, long, 4000, placeType, this.GOOGLE_API_KEY);\n      console.log('Get Places from ', url);\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        console.log('resultat');\n        console.log(res);\n        res.results.map(function (element, index) {\n          var marketObj = {};\n          marketObj.id = element.id;\n          marketObj.name = element.name;\n          marketObj.icon = element.icon;\n          marketObj.photos = element.photos ? element.photos : '';\n          marketObj.open = element.opening_hours ? element.opening_hours.open_now : true;\n          marketObj.rating = element.rating;\n          marketObj.placeId = element.place_id;\n          marketObj.vicinity = element.vicinity;\n          marketObj.marker = {\n            latitude: element.geometry.location.lat,\n            longitude: element.geometry.location.lng\n          };\n\n          if (marketObj.open) {\n            markers.push(marketObj);\n          }\n        });\n\n        _this3.setState({\n          places: markers\n        });\n      });\n    }\n  }, {\n    key: \"getPlacesUrl\",\n    value: function getPlacesUrl(lat, long, radius, type, apiKey) {\n      console.log('Get place Url');\n      var baseUrl = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?\";\n      var location = \"location=\" + lat + \",\" + long + \"&radius=\" + radius;\n      var typeData = \"&types=\" + type;\n      var api = \"&key=\" + apiKey;\n      return \"\" + baseUrl + location + typeData + api;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$state2 = this.state,\n          lat = _this$state2.lat,\n          long = _this$state2.long,\n          places = _this$state2.places;\n      console.log(\"ireto ny user online ireot \", this.props.user);\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: Platform.OS === 'ios' ? styles.under_ios : styles.under,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }\n      }, React.createElement(HeaderMenu, {\n        navigation: this.props.navigation,\n        mapUser: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }\n      })), React.createElement(View, {\n        style: styles.mapView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }, React.createElement(MapView, {\n        style: {\n          flex: 1\n        },\n        provider: PROVIDER_GOOGLE,\n        region: {\n          latitude: lat,\n          longitude: long,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }\n      }, this.props.user.online_users && this.props.user.online_users.map(function (user) {\n        return React.createElement(MapView.Marker, {\n          coordinate: {\n            latitude: user.coords.lat,\n            longitude: user.coords.log\n          },\n          title: user.prenomUser + \" \" + user.nomUser,\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 29\n          }\n        }, React.createElement(Avatar, {\n          size: \"medium\",\n          rounded: true,\n          source: {\n            uri: _this4.props.user.user.imageUser\n          },\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 33\n          }\n        }));\n      }))));\n    }\n  }]);\n\n  return MapUser;\n}(Component);\n\nMapUser.navigationOptions = function (props) {\n  var placeName = 'Pharmacy';\n  return {\n    headerTitle: placeName.toUpperCase()\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    user: store.user\n  };\n};\n\nvar mapDispatchToProps = {\n  onlineUser: onlineUser\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(MapUser);","map":{"version":3,"sources":["E:/Projets/Acadys/best4sante/SanteV2/assets/Screens/Samaritain/MapUser.js"],"names":["React","Component","MapView","PROVIDER_GOOGLE","PlaceList","styles","HeaderMenu","connect","SocketService","onlineUser","getCurrentLocation","Avatar","google","MapUser","props","getLocationAsync","location","console","log","setState","lat","coords","latitude","long","longitude","getUserConnected","socketSrv","onSamaritainListChange","userList","state","places","isLoading","placeType","GOOGLE_API_KEY","cloud_key","navigation","navigator","geolocation","getCurrentPosition","position","getPlaces","markers","url","getPlacesUrl","fetch","then","res","json","results","map","element","index","marketObj","id","name","icon","photos","open","opening_hours","open_now","rating","placeId","place_id","vicinity","marker","geometry","lng","push","radius","type","apiKey","baseUrl","typeData","api","user","container","Platform","OS","under_ios","under","mapView","flex","latitudeDelta","longitudeDelta","online_users","prenomUser","nomUser","uri","imageUser","navigationOptions","placeName","headerTitle","toUpperCase","mapStateToProps","store","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\r\nimport { View, ScrollView,Text } from \"react-native\";\r\nimport PlaceList from \"../Place/PlaceList\";\r\nimport styles from \"../Map/styles\";\r\nimport HeaderMenu from \"../../component/Menu/HeaderMenu\"\r\nimport { connect } from \"react-redux\";\r\nimport { SocketService } from \"../../services/socket\";\r\nimport { onlineUser } from \"../../Action\";\r\nimport { getCurrentLocation } from \"../../services/location\";\r\nimport { Avatar } from \"react-native-elements\";\r\nimport google from \"../../API/google\"\r\nclass MapUser extends Component {\r\n    //Set the HeaderTitle screen\r\n    static navigationOptions = props => {\r\n        // const placeName = props.navigation.getParam(\"placeName\");\r\n        const placeName = 'Pharmacy';\r\n        return { headerTitle: placeName.toUpperCase() };\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        //Initial State\r\n        this.state = {\r\n            lat: 48.858453,\r\n            long: 2.294489,\r\n            places: [],\r\n            isLoading: false,\r\n            placeType: \"pharmacy\"\r\n        };\r\n\r\n        this.GOOGLE_API_KEY = google.cloud_key;\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getUserConnected()\r\n        await this.getLocationAsync()\r\n        const { navigation } = this.props;\r\n        // const placeType = navigation.getParam(\"placeType\");\r\n        const placeType = 'pharmacy';\r\n        this.setState({ placeType: placeType });\r\n\r\n        // this.getCurrentLocation();\r\n    }\r\n\r\n    getLocationAsync = async() =>{\r\n        let location = await getCurrentLocation()\r\n        console.log(\"location \",location)\r\n        this.setState({\r\n            lat : location.coords.latitude, long : location.coords.longitude\r\n        })\r\n    }\r\n\r\n    getUserConnected = async () => {\r\n\r\n        let socketSrv = new SocketService(\"samaritain\")\r\n        socketSrv.onSamaritainListChange(async (userList) => {\r\n            this.props.onlineUser(userList)\r\n        })\r\n\r\n    }\r\n\r\n    /**\r\n     * Get current user's position\r\n     */\r\n    getCurrentLocation() {\r\n        console.log('Get current location');\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const lat = position.coords.latitude;\r\n            const long = position.coords.longitude;\r\n            this.setState({ lat: lat, long: long });\r\n            console.log(this.state);\r\n            this.getPlaces();\r\n        });\r\n    }\r\n\r\n    getPlaces() {\r\n        console.log('get places');\r\n        const { lat, long, placeType } = this.state;\r\n        const markers = [];\r\n        const url = this.getPlacesUrl(lat, long, 4000, placeType, this.GOOGLE_API_KEY);\r\n        console.log('Get Places from ', url)\r\n        // const url = this.getPlacesUrl(lat, long, 2000, 'pharmacy', this.GOOGLE_API_KEY);\r\n        // const url = this.getPlacesUrl(-21.455028, 47.090339, 9000, 'pharmacy', this.GOOGLE_API_KEY);\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log('resultat');\r\n                console.log(res);\r\n                res.results.map((element, index) => {\r\n                    const marketObj = {};\r\n                    marketObj.id = element.id;\r\n                    marketObj.name = element.name;\r\n                    marketObj.icon = element.icon;\r\n                    marketObj.photos = element.photos ? element.photos : '';\r\n                    marketObj.open = element.opening_hours ? element.opening_hours.open_now : true;\r\n                    marketObj.rating = element.rating;\r\n                    marketObj.placeId = element.place_id;\r\n                    marketObj.vicinity = element.vicinity;\r\n                    marketObj.marker = {\r\n                        latitude: element.geometry.location.lat,\r\n                        longitude: element.geometry.location.lng\r\n                    };\r\n\r\n                    if (marketObj.open) {\r\n                        markers.push(marketObj);\r\n                    }\r\n                });\r\n                //update our places array\r\n                this.setState({ places: markers });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Get the Place URL\r\n     */\r\n    getPlacesUrl(lat, long, radius, type, apiKey) {\r\n        console.log('Get place Url')\r\n        const baseUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?`;\r\n        const location = `location=${lat},${long}&radius=${radius}`;\r\n        const typeData = `&types=${type}`;\r\n        const api = `&key=${apiKey}`;\r\n        return `${baseUrl}${location}${typeData}${api}`;\r\n\r\n        // https://www.google.fr/maps/search/Pharmacie+de+garde,+Fianarantsoa,+MADAGASCAR/@-19.789516,46.00493,7z/data=!3m1!4b1\r\n    }\r\n\r\n    render() {\r\n        const { lat, long, places } = this.state;\r\n        console.log(\"ireto ny user online ireot \", this.props.user)\r\n        return (\r\n            <View style={styles.container}>\r\n                <View style={Platform.OS === 'ios' ? styles.under_ios : styles.under}>\r\n                    <HeaderMenu navigation={this.props.navigation} mapUser={1} />\r\n                </View>\r\n\r\n\r\n                <View style={styles.mapView}>\r\n                    <MapView\r\n                        style={{\r\n                            flex: 1\r\n                        }}\r\n                        provider={PROVIDER_GOOGLE}\r\n                        region={{\r\n                            latitude: lat,\r\n                            longitude:long,\r\n                            latitudeDelta: 0.0922,\r\n                            longitudeDelta: 0.0421\r\n                        }}\r\n                    >\r\n\r\n                        {this.props.user.online_users && this.props.user.online_users.map(user => (\r\n                            <MapView.Marker\r\n                            coordinate={{\r\n                                latitude: user.coords.lat,\r\n                                longitude: user.coords.log\r\n                            }}\r\n                            title={user.prenomUser+\" \"+user.nomUser}\r\n                            >\r\n                                <Avatar size={\"medium\"} rounded source={{uri : this.props.user.user.imageUser}} />\r\n                               \r\n                            </MapView.Marker>\r\n                        ))}\r\n\r\n\r\n                    </MapView>\r\n                </View>\r\n\r\n                {/* <View style={styles.placeList}>\r\n          {\r\n            places.length > 0 ? <PlaceList places={places}/> : null\r\n          }\r\n          </View> */}\r\n\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        user: store.user,\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    onlineUser\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MapUser);\r\n"]},"metadata":{},"sourceType":"module"}