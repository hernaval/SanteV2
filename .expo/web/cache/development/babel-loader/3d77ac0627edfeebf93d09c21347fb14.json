{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\Projets\\\\Acadys\\\\best4sante\\\\SanteV2\\\\assets\\\\Screens\\\\VoiceScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Audio } from 'expo-av';\nimport * as Permissions from 'expo-permissions';\nimport * as FileSystem from 'expo-file-system';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nvar recordingOptions = {\n  android: {\n    extension: '.wav',\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000\n  },\n  ios: {\n    extension: '.wav',\n    audioQuality: Audio.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH,\n    sampleRate: 44100,\n    numberOfChannels: 1,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false\n  }\n};\n\nvar VoiceScreen = function (_Component) {\n  _inherits(VoiceScreen, _Component);\n\n  var _super = _createSuper(VoiceScreen);\n\n  function VoiceScreen(props) {\n    var _this;\n\n    _classCallCheck(this, VoiceScreen);\n\n    _this = _super.call(this, props);\n\n    _this.deleteRecordingFile = function _callee() {\n      var info;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(_this.state.recording.getURI()));\n\n            case 3:\n              info = _context.sent;\n              console.log(\"file to delete : \", info);\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(FileSystem.deleteAsync(info.uri));\n\n            case 7:\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(\"There was an error deleting recording file\", _context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9]], Promise);\n    };\n\n    _this.getTranscription = function _callee2() {\n      var info, uri, formData, response, data;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this.setState({\n                isFetching: true\n              });\n\n              _context2.prev = 1;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(_this.state.recording.getURI()));\n\n            case 4:\n              info = _context2.sent;\n              console.log(\"FILE INFO: \" + JSON.stringify(info));\n              uri = info.uri;\n              formData = new FormData();\n              formData.append('file', {\n                uri: uri,\n                type: 'audio/x-wav',\n                name: 'speech2text'\n              });\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(fetch(\"https://us-central1-best4sante-281604.cloudfunctions.net/voicesante\", {\n                method: 'POST',\n                body: formData\n              }));\n\n            case 11:\n              response = _context2.sent;\n              _context2.next = 14;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 14:\n              data = _context2.sent;\n              console.log(data);\n\n              _this.setState({\n                query: data.transcript\n              });\n\n              _context2.next = 26;\n              break;\n\n            case 19:\n              _context2.prev = 19;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log('There was an error reading file', _context2.t0);\n              _context2.next = 24;\n              return _regeneratorRuntime.awrap(_this.stopRecording());\n\n            case 24:\n              _context2.next = 26;\n              return _regeneratorRuntime.awrap(_this.resetRecording());\n\n            case 26:\n              _this.setState({\n                isFetching: false\n              });\n\n            case 27:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[1, 19]], Promise);\n    };\n\n    _this.stopRecording = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log(\"mijanona e\");\n\n              _this.setState({\n                isRecording: false\n              });\n\n              _context3.prev = 2;\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(_this.state.recording.stopAndUnloadAsync());\n\n            case 5:\n              _context3.next = 9;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](2);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[2, 7]], Promise);\n    };\n\n    _this.startRecording = function _callee4() {\n      var _await$Permissions$ge, status, recording;\n\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              console.log(\"lasa ty e\");\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.AUDIO_RECORDING));\n\n            case 3:\n              _await$Permissions$ge = _context4.sent;\n              status = _await$Permissions$ge.status;\n\n              if (!(status !== 'granted')) {\n                _context4.next = 7;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 7:\n              _this.setState({\n                isRecording: true\n              });\n\n              _context4.next = 10;\n              return _regeneratorRuntime.awrap(Audio.setAudioModeAsync({\n                allowsRecordingIOS: true,\n                interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n                playsInSilentModeIOS: true,\n                shouldDuckAndroid: true,\n                interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n                playThroughEarpieceAndroid: true\n              }));\n\n            case 10:\n              recording = new Audio.Recording();\n              _context4.prev = 11;\n              _context4.next = 14;\n              return _regeneratorRuntime.awrap(recording.prepareToRecordAsync(recordingOptions));\n\n            case 14:\n              _context4.next = 16;\n              return _regeneratorRuntime.awrap(recording.startAsync());\n\n            case 16:\n              _context4.next = 21;\n              break;\n\n            case 18:\n              _context4.prev = 18;\n              _context4.t0 = _context4[\"catch\"](11);\n              console.log(_context4.t0);\n\n            case 21:\n              _this.setState({\n                recording: recording\n              });\n\n            case 22:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[11, 18]], Promise);\n    };\n\n    _this.resetRecording = function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this.deleteRecordingFile();\n\n              _this.setState({\n                recording: false\n              });\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.handlePressIn = function () {\n      _this.startRecording();\n    };\n\n    _this.handlePressOut = function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this.stopRecording();\n\n              _this.getTranscription();\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      isRecording: false,\n      isFetching: false,\n      recording: null,\n      query: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(VoiceScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.AUDIO_RECORDING));\n\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPressIn: function onPressIn() {\n          return _this2.handlePressIn();\n        },\n        onPressOut: function onPressOut() {\n          return _this2.handlePressOut();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }\n      }, \"Hold for recording\")), this.state.isFetching && React.createElement(ActivityIndicator, {\n        color: \"#ffffff\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 43\n        }\n      }));\n    }\n  }]);\n\n  return VoiceScreen;\n}(Component);\n\nexport { VoiceScreen as default };","map":{"version":3,"sources":["E:/Projets/Acadys/best4sante/SanteV2/assets/Screens/VoiceScreen.js"],"names":["React","Component","Audio","Permissions","FileSystem","TouchableOpacity","recordingOptions","android","extension","sampleRate","numberOfChannels","bitRate","ios","audioQuality","RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH","linearPCMBitDepth","linearPCMIsBigEndian","linearPCMIsFloat","VoiceScreen","props","deleteRecordingFile","getInfoAsync","state","recording","getURI","info","console","log","deleteAsync","uri","getTranscription","setState","isFetching","JSON","stringify","formData","FormData","append","type","name","fetch","method","body","response","json","data","query","transcript","stopRecording","resetRecording","isRecording","stopAndUnloadAsync","startRecording","getAsync","AUDIO_RECORDING","status","setAudioModeAsync","allowsRecordingIOS","interruptionModeIOS","INTERRUPTION_MODE_IOS_DO_NOT_MIX","playsInSilentModeIOS","shouldDuckAndroid","interruptionModeAndroid","INTERRUPTION_MODE_ANDROID_DO_NOT_MIX","playThroughEarpieceAndroid","Recording","prepareToRecordAsync","startAsync","handlePressIn","handlePressOut","askAsync","flex","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Text, View, ActivityIndicator } from 'react-native'\r\nimport { Audio } from 'expo-av';\r\nimport * as Permissions from 'expo-permissions';\r\nimport * as FileSystem from 'expo-file-system';\r\nimport { TouchableOpacity } from 'react-native-gesture-handler';\r\n\r\nconst recordingOptions = {\r\n    // android not currently in use. Not getting results from speech to text with .m4a\r\n    // but parameters are required\r\n    android: {\r\n        extension: '.wav',\r\n       \r\n        sampleRate: 44100,\r\n        numberOfChannels: 2,\r\n        bitRate: 128000,\r\n    },\r\n    ios: {\r\n        extension: '.wav',\r\n        audioQuality: Audio.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH,\r\n        sampleRate: 44100,\r\n        numberOfChannels: 1,\r\n        bitRate: 128000,\r\n        linearPCMBitDepth: 16,\r\n        linearPCMIsBigEndian: false,\r\n        linearPCMIsFloat: false,\r\n    },\r\n};\r\n\r\nexport default class VoiceScreen extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            isRecording : false,\r\n            isFetching : false,\r\n            recording : null,\r\n            query : \"\"\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        await Permissions.askAsync(Permissions.AUDIO_RECORDING);\r\n    }\r\n\r\n   \r\n     deleteRecordingFile = async () => {\r\n        try {\r\n            const info = await FileSystem.getInfoAsync(this.state.recording.getURI());\r\n            console.log(\"file to delete : \",info)\r\n            await FileSystem.deleteAsync(info.uri)\r\n        } catch(error) {\r\n            console.log(\"There was an error deleting recording file\", error);\r\n        }\r\n    }\r\n\r\n     getTranscription = async () => {\r\n        this.setState({isFetching : true})\r\n        try {\r\n            const info = await FileSystem.getInfoAsync(this.state.recording.getURI());\r\n            console.log(`FILE INFO: ${JSON.stringify(info)}`);\r\n            const uri = info.uri;\r\n            const formData = new FormData();\r\n            formData.append('file', {\r\n                uri,\r\n                type: 'audio/x-wav',\r\n                name: 'speech2text'\r\n            });\r\n            \r\n           \r\n\r\n            const response = await fetch(\"https://us-central1-best4sante-281604.cloudfunctions.net/voicesante\", {\r\n                method: 'POST',\r\n                body: formData\r\n            });\r\n            \r\n            const data = await response.json();\r\n            console.log(data);\r\n            this.setState({query : data.transcript})\r\n            \r\n           \r\n        } catch(error) {\r\n            console.log('There was an error reading file', error);\r\n            await this.stopRecording()\r\n            await this.resetRecording();\r\n        }\r\n        this.setState({isFetching : false})\r\n    }\r\n\r\n     stopRecording = async () => {\r\n         console.log(\"mijanona e\")\r\n        this.setState({isRecording : false})\r\n        try {\r\n            await this.state.recording.stopAndUnloadAsync();\r\n        } catch (error) {\r\n            // Do nothing -- we are already unloaded.\r\n        }\r\n    }\r\n\r\n    startRecording = async () => {\r\n        console.log(\"lasa ty e\")\r\n        const { status } = await Permissions.getAsync(Permissions.AUDIO_RECORDING);\r\n        if (status !== 'granted') return;\r\n\r\n        this.setState({isRecording :true})\r\n        await Audio.setAudioModeAsync({\r\n            allowsRecordingIOS: true,\r\n            interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\r\n            playsInSilentModeIOS: true,\r\n            shouldDuckAndroid: true,\r\n            interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\r\n            playThroughEarpieceAndroid: true,\r\n        });\r\n        const recording = new Audio.Recording();\r\n\r\n        try {\r\n            await recording.prepareToRecordAsync(recordingOptions);\r\n            await recording.startAsync();\r\n        } catch (error) {\r\n            console.log(error);\r\n            \r\n        }\r\n\r\n        this.setState({recording : recording})\r\n    }\r\n\r\n     resetRecording = async () => {\r\n         \r\n         this.deleteRecordingFile();\r\n        this.setState({recording :false})\r\n    };\r\n\r\n\r\n    handlePressIn =  () =>{\r\n         this.startRecording()\r\n    } \r\n    handlePressOut = async () => {\r\n         this.stopRecording()\r\n          this.getTranscription();\r\n    }\r\n     \r\n    render() {\r\n        return (\r\n            <View style={{flex:  1, justifyContent : \"center\",alignItems :\"center\"}}>\r\n                <TouchableOpacity\r\n                    onPressIn={()=>this.handlePressIn()}\r\n                    onPressOut={()=> this.handlePressOut()}\r\n                >\r\n                    <Text>\r\n                        Hold for recording\r\n                    </Text>\r\n                </TouchableOpacity>\r\n\r\n                {this.state.isFetching && <ActivityIndicator color=\"#ffffff\" />}\r\n            </View>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}