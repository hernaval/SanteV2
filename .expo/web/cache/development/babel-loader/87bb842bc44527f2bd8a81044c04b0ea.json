{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this;\n\nimport * as Location from 'expo-location';\nimport * as Permissions from 'expo-permissions';\nimport Axios from 'axios';\nexport var getCurrentLocation = function getCurrentLocation() {\n  var _await$Permissions$as, status, location;\n\n  return _regeneratorRuntime.async(function getCurrentLocation$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n        case 2:\n          _await$Permissions$as = _context.sent;\n          status = _await$Permissions$as.status;\n\n          if (!(status !== 'granted')) {\n            _context.next = 8;\n            break;\n          }\n\n          _this.setState({\n            errorMessage: 'Permission to access location was denied'\n          });\n\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n        case 10:\n          location = _context.sent;\n          return _context.abrupt(\"return\", location);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var calculateDistanceBetween = function calculateDistanceBetween(myPosition, hisPosition) {\n  var data, url;\n  return _regeneratorRuntime.async(function calculateDistanceBetween$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          data = {};\n          url = \"https://maps.googleapis.com/maps/api/distancematrix/json?origins=\" + myPosition + \"&destinations=\" + hisPosition + \"&mode=car&language=fr-FR&sensor=false&key=AIzaSyBOoJBp0W8ksY21rV4yAGoHHCSaJRVyibs\";\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(Axios.get(url).then(function _callee(res) {\n            var distanceValue, durationValue, distanceText, durationText, _distanceValue, _durationValue, _distanceText, _durationText;\n\n            return _regeneratorRuntime.async(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    res = res.data;\n\n                    if (res.rows[0].elements[0].status == \"ZERO_RESULTS\") {\n                      distanceValue = undefined;\n                      durationValue = undefined;\n                      distanceText = undefined;\n                      durationText = undefined;\n\n                      _extends(data, {\n                        distanceValue: distanceValue,\n                        durationValue: durationValue,\n                        distanceText: distanceText,\n                        durationText: durationText\n                      });\n                    } else {\n                      _distanceValue = res.rows[0].elements[0].distance.value;\n                      _durationValue = res.rows[0].elements[0].duration.value;\n                      _distanceText = res.rows[0].elements[0].distance.text;\n                      _durationText = res.rows[0].elements[0].duration.text;\n\n                      _extends(data, {\n                        distanceValue: _distanceValue,\n                        durationValue: _durationValue,\n                        distanceText: _distanceText,\n                        durationText: _durationText\n                      });\n                    }\n\n                  case 2:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 4:\n          return _context3.abrupt(\"return\", data);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getCountryCode = function getCountryCode(lat, log, api) {\n  var code;\n  return _regeneratorRuntime.async(function getCountryCode$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          code = \"\";\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(Axios.get(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + lat + \",\" + log + \"&key=\" + api).then(function _callee2(response) {\n            var globalRes, resObj, local;\n            return _regeneratorRuntime.async(function _callee2$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    globalRes = response.data.results[0].address_components;\n                    _context4.next = 3;\n                    return _regeneratorRuntime.awrap(globalRes.filter(function (el) {\n                      return el.types.includes(\"country\");\n                    }));\n\n                  case 3:\n                    resObj = _context4.sent;\n                    _context4.next = 6;\n                    return _regeneratorRuntime.awrap(resObj[0].short_name);\n\n                  case 6:\n                    local = _context4.sent;\n                    code = local;\n\n                  case 8:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }).catch(function (err) {\n            console.log(err);\n          }));\n\n        case 3:\n          return _context5.abrupt(\"return\", code);\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["E:/Projets/Acadys/best4sante/SanteV2/assets/services/location.js"],"names":["Location","Permissions","Axios","getCurrentLocation","askAsync","LOCATION","status","setState","errorMessage","getCurrentPositionAsync","location","calculateDistanceBetween","myPosition","hisPosition","data","url","get","then","res","rows","elements","distanceValue","undefined","durationValue","distanceText","durationText","distance","value","duration","text","getCountryCode","lat","log","api","code","response","globalRes","results","address_components","filter","el","types","includes","resObj","short_name","local","catch","err","console"],"mappings":";;;;;AAAA,OAAO,KAAKA,QAAZ,MAA0B,eAA1B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACPF,WAAW,CAACG,QAAZ,CAAqBH,WAAW,CAACI,QAAjC,CADO;;AAAA;AAAA;AACxBC,UAAAA,MADwB,yBACxBA,MADwB;;AAAA,gBAE1BA,MAAM,KAAK,SAFe;AAAA;AAAA;AAAA;;AAG5B,UAAA,KAAI,CAACC,QAAL,CAAc;AACZC,YAAAA,YAAY,EAAE;AADF,WAAd;;AAH4B;AAAA;;AAAA;AAAA;AAAA,2CAOPR,QAAQ,CAACS,uBAAT,CAAiC,EAAjC,CAPO;;AAAA;AAOxBC,UAAAA,QAPwB;AAAA,2CASrBA,QATqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;AAeP,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAOC,UAAP,EAAmBC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAElCC,UAAAA,IAFkC,GAE3B,EAF2B;AAIhCC,UAAAA,GAJgC,yEAI0CH,UAJ1C,sBAIqEC,WAJrE;AAAA;AAAA,2CAMhCX,KAAK,CAACc,GAAN,CAAUD,GAAV,EACDE,IADC,CACI,iBAAMC,GAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEFA,oBAAAA,GAAG,GAAGA,GAAG,CAACJ,IAAV;;AACF,wBAAGI,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYC,QAAZ,CAAqB,CAArB,EAAwBd,MAAxB,IAAkC,cAArC,EAAoD;AAC5Ce,sBAAAA,aAD4C,GAC5BC,SAD4B;AAE5CC,sBAAAA,aAF4C,GAE5BD,SAF4B;AAG5CE,sBAAAA,YAH4C,GAG7BF,SAH6B;AAI5CG,sBAAAA,YAJ4C,GAI7BH,SAJ6B;;AAMlD,+BAAcR,IAAd,EAAoB;AAACO,wBAAAA,aAAa,EAAbA,aAAD;AAAeE,wBAAAA,aAAa,EAAbA,aAAf;AAA6BC,wBAAAA,YAAY,EAAZA,YAA7B;AAA0CC,wBAAAA,YAAY,EAAZA;AAA1C,uBAApB;AACD,qBAPD,MAOK;AAEGJ,sBAAAA,cAFH,GAEmBH,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYC,QAAZ,CAAqB,CAArB,EAAwBM,QAAxB,CAAiCC,KAFpD;AAGGJ,sBAAAA,cAHH,GAGmBL,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYC,QAAZ,CAAqB,CAArB,EAAwBQ,QAAxB,CAAiCD,KAHpD;AAIGH,sBAAAA,aAJH,GAIkBN,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYC,QAAZ,CAAqB,CAArB,EAAwBM,QAAxB,CAAiCG,IAJnD;AAKGJ,sBAAAA,aALH,GAKkBP,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYC,QAAZ,CAAqB,CAArB,EAAwBQ,QAAxB,CAAiCC,IALnD;;AAOF,+BAAcf,IAAd,EAAoB;AAACO,wBAAAA,aAAa,EAAbA,cAAD;AAAeE,wBAAAA,aAAa,EAAbA,cAAf;AAA6BC,wBAAAA,YAAY,EAAZA,aAA7B;AAA0CC,wBAAAA,YAAY,EAAZA;AAA1C,uBAApB;AACF;;AAlBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CANgC;;AAAA;AAAA,4CA4B/BX,IA5B+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjC;AAgCP,OAAO,IAAOgB,cAAc,GAAG,SAAjBA,cAAiB,CAAMC,GAAN,EAAWC,GAAX,EAAgBC,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,UAAAA,IADyB,GAClB,EADkB;AAAA;AAAA,2CAEvBhC,KAAK,CAACc,GAAN,CAAU,8DAA8De,GAA9D,GAAoE,GAApE,GAA0EC,GAA1E,GAAgF,OAAhF,GAA0FC,GAApG,EACShB,IADT,CACc,kBAAMkB,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACIC,oBAAAA,SADJ,GACgBD,QAAQ,CAACrB,IAAT,CAAcuB,OAAd,CAAsB,CAAtB,EAAyBC,kBADzC;AAAA;AAAA,qDAGiBF,SAAS,CAACG,MAAV,CAAiB,UAAAC,EAAE,EAAI;AACtC,6BAAOA,EAAE,CAACC,KAAH,CAASC,QAAT,CAAkB,SAAlB,CAAP;AACH,qBAFkB,CAHjB;;AAAA;AAGEC,oBAAAA,MAHF;AAAA;AAAA,qDAMkBA,MAAM,CAAC,CAAD,CAAN,CAAUC,UAN5B;;AAAA;AAMIC,oBAAAA,KANJ;AAOFX,oBAAAA,IAAI,GAAGW,KAAP;;AAPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADd,EAUSC,KAVT,CAUe,UAAAC,GAAG,EAAI;AACVC,YAAAA,OAAO,CAAChB,GAAR,CAAYe,GAAZ;AACH,WAZT,CAFuB;;AAAA;AAAA,4CAelBb,IAfkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB","sourcesContent":["import * as Location from 'expo-location';\r\nimport * as Permissions from 'expo-permissions';\r\nimport Axios from 'axios';\r\n\r\nexport const getCurrentLocation = async () =>{\r\n    let { status } = await Permissions.askAsync(Permissions.LOCATION);\r\n    if (status !== 'granted') {\r\n      this.setState({\r\n        errorMessage: 'Permission to access location was denied',\r\n      });\r\n    }else{\r\n      let location = await Location.getCurrentPositionAsync({});\r\n      \r\n      return location\r\n    }\r\n\r\n     \r\n}\r\n\r\nexport const calculateDistanceBetween = async (myPosition, hisPosition) =>{\r\n   \r\n  let data = {}\r\n\r\n  const url = `https://maps.googleapis.com/maps/api/distancematrix/json?origins=${myPosition}&destinations=${hisPosition}&mode=car&language=fr-FR&sensor=false&key=AIzaSyBOoJBp0W8ksY21rV4yAGoHHCSaJRVyibs`\r\n\r\n  await Axios.get(url)\r\n      .then(async res=>{\r\n\r\n          res = res.data\r\n        if(res.rows[0].elements[0].status == \"ZERO_RESULTS\"){\r\n          const distanceValue = undefined\r\n          const durationValue = undefined\r\n          const distanceText = undefined\r\n          const durationText = undefined\r\n\r\n          Object.assign(data, {distanceValue,durationValue,distanceText,durationText})\r\n        }else{\r\n\r\n          const distanceValue = res.rows[0].elements[0].distance.value\r\n          const durationValue = res.rows[0].elements[0].duration.value\r\n          const distanceText = res.rows[0].elements[0].distance.text\r\n          const durationText = res.rows[0].elements[0].duration.text\r\n\r\n           Object.assign(data, {distanceValue,durationValue,distanceText,durationText})\r\n        }\r\n          \r\n      })\r\n  return data\r\n \r\n}\r\n\r\nexport const  getCountryCode = async(lat, log, api) =>{\r\n  let code = \"\"\r\n  await Axios.get(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + lat + \",\" + log + \"&key=\" + api)\r\n                .then(async response => {\r\n                    const globalRes = response.data.results[0].address_components\r\n\r\n                    let resObj = await globalRes.filter(el => {\r\n                        return el.types.includes(\"country\")\r\n                    })\r\n                    const local = await resObj[0].short_name\r\n                    code = local\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n      return code\r\n}"]},"metadata":{},"sourceType":"module"}