{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\Projets\\\\Acadys\\\\best4sante\\\\SanteV2\\\\assets\\\\Screens\\\\Rappel\\\\Calendars.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as Calendar from 'expo-calendar';\n\nvar Calendars = function (_Component) {\n  _inherits(Calendars, _Component);\n\n  var _super = _createSuper(Calendars);\n\n  function Calendars() {\n    _classCallCheck(this, Calendars);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Calendars, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _await$Calendar$reque, status, calendars;\n\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Calendar.requestCalendarPermissionsAsync());\n\n            case 2:\n              _await$Calendar$reque = _context.sent;\n              status = _await$Calendar$reque.status;\n\n              if (!(status === 'granted')) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Calendar.getCalendarsAsync());\n\n            case 7:\n              calendars = _context.sent;\n              console.log('Here are all your calendars:');\n              console.log({\n                calendars: calendars\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getDefaultCalendarSource\",\n    value: function getDefaultCalendarSource() {\n      var calendars, defaultCalendars;\n      return _regeneratorRuntime.async(function getDefaultCalendarSource$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Calendar.getCalendarsAsync());\n\n            case 2:\n              calendars = _context2.sent;\n              defaultCalendars = calendars.filter(function (each) {\n                return each.source.name === 'Default';\n              });\n              return _context2.abrupt(\"return\", defaultCalendars[0].source);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"createCalendar\",\n    value: function createCalendar() {\n      var defaultCalendarSource, newCalendarID, date1, date2, tmz, tmzAbs, sign, tmzVal, timezone, options, event;\n      return _regeneratorRuntime.async(function createCalendar$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(Platform.OS === 'ios')) {\n                _context3.next = 6;\n                break;\n              }\n\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(getDefaultCalendarSource());\n\n            case 3:\n              _context3.t0 = _context3.sent;\n              _context3.next = 7;\n              break;\n\n            case 6:\n              _context3.t0 = {\n                isLocalAccount: true,\n                name: 'Expo Calendar'\n              };\n\n            case 7:\n              defaultCalendarSource = _context3.t0;\n              _context3.next = 10;\n              return _regeneratorRuntime.awrap(Calendar.createCalendarAsync({\n                title: 'Expo Calendar',\n                color: 'blue',\n                entityType: Calendar.EntityTypes.EVENT,\n                sourceId: defaultCalendarSource.id,\n                source: defaultCalendarSource,\n                name: 'internalCalendarName',\n                ownerAccount: 'personal',\n                accessLevel: Calendar.CalendarAccessLevel.OWNER,\n                allowedReminders: [Calendar.AlarmMethod.ALARM, Calendar.AlarmMethod.ALERT, Calendar.AlarmMethod.EMAIL, Calendar.AlarmMethod.SMS, Calendar.AlarmMethod.DEFAULT]\n              }));\n\n            case 10:\n              newCalendarID = _context3.sent;\n              console.log(\"Your new calendar ID is: \" + newCalendarID);\n              date1 = new Date('July 03, 2020 23:37:00');\n              date2 = new Date('July 03, 2020 23:40:00');\n              tmz = new Date().getTimezoneOffset();\n              tmzAbs = Math.abs(tmz);\n              sign = tmz < 0 ? \"+\" : \"-\";\n              tmzVal = tmzAbs / 60;\n              timezone = \"GMT\" + sign + tmzVal;\n              options = {\n                method: Calendar.AlarmMethod.ALERT,\n                relativeOffset: -2\n              };\n              _context3.next = 22;\n              return _regeneratorRuntime.awrap(Calendar.createEventAsync(newCalendarID, {\n                title: \"TEST VOLOHANA\",\n                startDate: date1,\n                endDate: date2,\n                timeZone: timezone,\n                alarms: [options]\n              }));\n\n            case 22:\n              event = _context3.sent;\n              console.log(\"your event id is : \" + event);\n\n            case 24:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: this.createCalendar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }\n      }, \"Create caldentar and add Event\")));\n    }\n  }]);\n\n  return Calendars;\n}(Component);\n\nexport { Calendars as default };","map":{"version":3,"sources":["E:/Projets/Acadys/best4sante/SanteV2/assets/Screens/Rappel/Calendars.js"],"names":["React","Component","Calendar","Calendars","requestCalendarPermissionsAsync","status","getCalendarsAsync","calendars","console","log","defaultCalendars","filter","each","source","name","Platform","OS","getDefaultCalendarSource","isLocalAccount","defaultCalendarSource","createCalendarAsync","title","color","entityType","EntityTypes","EVENT","sourceId","id","ownerAccount","accessLevel","CalendarAccessLevel","OWNER","allowedReminders","AlarmMethod","ALARM","ALERT","EMAIL","SMS","DEFAULT","newCalendarID","date1","Date","date2","tmz","getTimezoneOffset","tmzAbs","Math","abs","sign","tmzVal","timezone","options","method","relativeOffset","createEventAsync","startDate","endDate","timeZone","alarms","event","flex","justifyContent","alignItems","createCalendar"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Text, View ,Platform,TouchableOpacity} from 'react-native'\r\nimport * as Calendar from 'expo-calendar';\r\nexport default class Calendars extends Component {\r\n\r\n    async componentDidMount() {\r\n        const { status } = await Calendar.requestCalendarPermissionsAsync();\r\n        if (status === 'granted') {\r\n            const calendars = await Calendar.getCalendarsAsync();\r\n            console.log('Here are all your calendars:');\r\n            console.log({ calendars });\r\n        }\r\n    }\r\n\r\n    async  getDefaultCalendarSource() {\r\n        const calendars = await Calendar.getCalendarsAsync();\r\n        const defaultCalendars = calendars.filter(each => each.source.name === 'Default');\r\n        return defaultCalendars[0].source;\r\n      }\r\n      \r\n      async  createCalendar() {\r\n        const defaultCalendarSource =\r\n          Platform.OS === 'ios'\r\n            ? await getDefaultCalendarSource()\r\n            : { isLocalAccount: true, name: 'Expo Calendar' };\r\n        const newCalendarID = await Calendar.createCalendarAsync({\r\n          title: 'Expo Calendar',\r\n          color: 'blue',\r\n          entityType: Calendar.EntityTypes.EVENT,\r\n          sourceId: defaultCalendarSource.id,\r\n          source: defaultCalendarSource,\r\n          name: 'internalCalendarName',\r\n          ownerAccount: 'personal',\r\n          accessLevel: Calendar.CalendarAccessLevel.OWNER,\r\n          allowedReminders : [Calendar.AlarmMethod.ALARM, Calendar.AlarmMethod.ALERT, Calendar.AlarmMethod.EMAIL, Calendar.AlarmMethod.SMS, Calendar.AlarmMethod.DEFAULT]\r\n        });\r\n        \r\n        console.log(`Your new calendar ID is: ${newCalendarID}`);\r\n        const date1 = new Date('July 03, 2020 23:37:00')\r\n        const date2 = new Date('July 03, 2020 23:40:00')\r\n       const tmz = new Date().getTimezoneOffset()\r\n       const tmzAbs = Math.abs(tmz)\r\n       const sign = tmz <0 ? \"+\" : \"-\"\r\n       const tmzVal = tmzAbs / 60\r\n       const timezone = `GMT${sign}${tmzVal}`\r\n        \r\n        const options = {\r\n          method  : Calendar.AlarmMethod.ALERT,\r\n         relativeOffset : -2\r\n          \r\n        } \r\n          let event = await Calendar.createEventAsync(newCalendarID,{\r\n          title : \"TEST VOLOHANA\",\r\n          startDate : date1,\r\n          endDate : date2,\r\n          timeZone :  timezone,\r\n\r\n          alarms : [options]\r\n          \r\n        })\r\n        console.log(\"your event id is : \"+event)\r\n      }\r\n\r\n      \r\n     \r\n    render() {\r\n        return (\r\n            <View style={{flex : 1,justifyContent  :\"center\",alignItems : \"center\"}}>\r\n                <TouchableOpacity onPress={this.createCalendar}>\r\n                    <Text>Create caldentar and add Event</Text>\r\n                </TouchableOpacity>\r\n                \r\n            </View>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}