{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\Projets\\\\Acadys\\\\best4sante\\\\SanteV2\\\\assets\\\\Screens\\\\Map\\\\MapView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport PlaceList from \"../Place/PlaceList\";\nimport styles from \"./styles\";\nimport HeaderMenu from \"../../component/Menu/HeaderMenu\";\n\nvar MapScreen = function (_Component) {\n  _inherits(MapScreen, _Component);\n\n  var _super = _createSuper(MapScreen);\n\n  function MapScreen(props) {\n    var _this;\n\n    _classCallCheck(this, MapScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      lat: 48.858453,\n      long: 2.294489,\n      places: [],\n      isLoading: false,\n      placeType: \"pharmacy\"\n    };\n    _this.GOOGLE_API_KEY = \"AIzaSyBOoJBp0W8ksY21rV4yAGoHHCSaJRVyibs\";\n    return _this;\n  }\n\n  _createClass(MapScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.props);\n      var navigation = this.props.navigation;\n      var placeType = 'pharmacy';\n      this.setState({\n        placeType: placeType\n      });\n    }\n  }, {\n    key: \"getCurrentLocation\",\n    value: function getCurrentLocation() {\n      var _this2 = this;\n\n      console.log('Get current location');\n      navigator.geolocation.getCurrentPosition(function (position) {\n        var lat = position.coords.latitude;\n        var long = position.coords.longitude;\n\n        _this2.setState({\n          lat: lat,\n          long: long\n        });\n\n        console.log(_this2.state);\n\n        _this2.getPlaces();\n      });\n    }\n  }, {\n    key: \"getPlaces\",\n    value: function getPlaces() {\n      var _this3 = this;\n\n      console.log('get places');\n      var _this$state = this.state,\n          lat = _this$state.lat,\n          long = _this$state.long,\n          placeType = _this$state.placeType;\n      var markers = [];\n      var url = this.getPlacesUrl(lat, long, 4000, placeType, this.GOOGLE_API_KEY);\n      console.log('Get Places from ', url);\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        console.log('resultat');\n        console.log(res);\n        res.results.map(function (element, index) {\n          var marketObj = {};\n          marketObj.id = element.id;\n          marketObj.name = element.name;\n          marketObj.icon = element.icon;\n          marketObj.photos = element.photos ? element.photos : '';\n          marketObj.open = element.opening_hours ? element.opening_hours.open_now : true;\n          marketObj.rating = element.rating;\n          marketObj.placeId = element.place_id;\n          marketObj.vicinity = element.vicinity;\n          marketObj.marker = {\n            latitude: element.geometry.location.lat,\n            longitude: element.geometry.location.lng\n          };\n\n          if (marketObj.open) {\n            markers.push(marketObj);\n          }\n        });\n\n        _this3.setState({\n          places: markers\n        });\n      });\n    }\n  }, {\n    key: \"getPlacesUrl\",\n    value: function getPlacesUrl(lat, long, radius, type, apiKey) {\n      console.log('Get place Url');\n      var baseUrl = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?\";\n      var location = \"location=\" + lat + \",\" + long + \"&radius=\" + radius;\n      var typeData = \"&types=\" + type;\n      var api = \"&key=\" + apiKey;\n      return \"\" + baseUrl + location + typeData + api;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          lat = _this$state2.lat,\n          long = _this$state2.long,\n          places = _this$state2.places;\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: Platform.OS === 'ios' ? styles.under_ios : styles.under,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }, React.createElement(HeaderMenu, {\n        navigation: this.props.navigation,\n        mapview: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return MapScreen;\n}(Component);\n\nMapScreen.navigationOptions = function (props) {\n  var placeName = 'Pharmacy';\n  return {\n    headerTitle: placeName.toUpperCase()\n  };\n};\n\nexport default MapScreen;","map":{"version":3,"sources":["E:/Projets/Acadys/best4sante/SanteV2/assets/Screens/Map/MapView.js"],"names":["React","Component","MapView","PROVIDER_GOOGLE","PlaceList","styles","HeaderMenu","MapScreen","props","state","lat","long","places","isLoading","placeType","GOOGLE_API_KEY","console","log","navigation","setState","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getPlaces","markers","url","getPlacesUrl","fetch","then","res","json","results","map","element","index","marketObj","id","name","icon","photos","open","opening_hours","open_now","rating","placeId","place_id","vicinity","marker","geometry","location","lng","push","radius","type","apiKey","baseUrl","typeData","api","container","Platform","OS","under_ios","under","navigationOptions","placeName","headerTitle","toUpperCase"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,IAAkBC,eAAlB,QAAyC,mBAAzC;;;AAEA,OAAOC,SAAP;AACA,OAAOC,MAAP;AACA,OAAOC,UAAP;;IAEMC,S;;;;;AAQJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,GAAG,EAAE,SADM;AAEXC,MAAAA,IAAI,EAAE,QAFK;AAGXC,MAAAA,MAAM,EAAE,EAHG;AAIXC,MAAAA,SAAS,EAAE,KAJA;AAKXC,MAAAA,SAAS,EAAE;AALA,KAAb;AAQA,UAAKC,cAAL,GAAsB,yCAAtB;AAXiB;AAYlB;;;;wCAEmB;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAjB;AADkB,UAEVU,UAFU,GAEK,KAAKV,KAFV,CAEVU,UAFU;AAIlB,UAAMJ,SAAS,GAAG,UAAlB;AACA,WAAKK,QAAL,CAAc;AAAEL,QAAAA,SAAS,EAAEA;AAAb,OAAd;AAGD;;;yCAKoB;AAAA;;AACnBE,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAG,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAAAC,QAAQ,EAAI;AACnD,YAAMb,GAAG,GAAGa,QAAQ,CAACC,MAAT,CAAgBC,QAA5B;AACA,YAAMd,IAAI,GAAGY,QAAQ,CAACC,MAAT,CAAgBE,SAA7B;;AACA,QAAA,MAAI,CAACP,QAAL,CAAc;AAAET,UAAAA,GAAG,EAAEA,GAAP;AAAYC,UAAAA,IAAI,EAAEA;AAAlB,SAAd;;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAI,CAACR,KAAjB;;AACA,QAAA,MAAI,CAACkB,SAAL;AACD,OAND;AAOD;;;gCAEW;AAAA;;AACVX,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AADU,wBAEuB,KAAKR,KAF5B;AAAA,UAEFC,GAFE,eAEFA,GAFE;AAAA,UAEGC,IAFH,eAEGA,IAFH;AAAA,UAESG,SAFT,eAESA,SAFT;AAGV,UAAMc,OAAO,GAAG,EAAhB;AACA,UAAMC,GAAG,GAAG,KAAKC,YAAL,CAAkBpB,GAAlB,EAAuBC,IAAvB,EAA6B,IAA7B,EAAmCG,SAAnC,EAA8C,KAAKC,cAAnD,CAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCY,GAAhC;AAGAE,MAAAA,KAAK,CAACF,GAAD,CAAL,CACGG,IADH,CACQ,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OADX,EAEGF,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACXjB,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AACAA,QAAAA,GAAG,CAACE,OAAJ,CAAYC,GAAZ,CAAgB,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAClC,cAAMC,SAAS,GAAG,EAAlB;AACAA,UAAAA,SAAS,CAACC,EAAV,GAAeH,OAAO,CAACG,EAAvB;AACAD,UAAAA,SAAS,CAACE,IAAV,GAAiBJ,OAAO,CAACI,IAAzB;AACAF,UAAAA,SAAS,CAACG,IAAV,GAAiBL,OAAO,CAACK,IAAzB;AACAH,UAAAA,SAAS,CAACI,MAAV,GAAmBN,OAAO,CAACM,MAAR,GAAiBN,OAAO,CAACM,MAAzB,GAAkC,EAArD;AACAJ,UAAAA,SAAS,CAACK,IAAV,GAAiBP,OAAO,CAACQ,aAAR,GAAwBR,OAAO,CAACQ,aAAR,CAAsBC,QAA9C,GAAyD,IAA1E;AACAP,UAAAA,SAAS,CAACQ,MAAV,GAAmBV,OAAO,CAACU,MAA3B;AACAR,UAAAA,SAAS,CAACS,OAAV,GAAoBX,OAAO,CAACY,QAA5B;AACAV,UAAAA,SAAS,CAACW,QAAV,GAAqBb,OAAO,CAACa,QAA7B;AACAX,UAAAA,SAAS,CAACY,MAAV,GAAmB;AACjB1B,YAAAA,QAAQ,EAAEY,OAAO,CAACe,QAAR,CAAiBC,QAAjB,CAA0B3C,GADnB;AAEjBgB,YAAAA,SAAS,EAAEW,OAAO,CAACe,QAAR,CAAiBC,QAAjB,CAA0BC;AAFpB,WAAnB;;AAKA,cAAGf,SAAS,CAACK,IAAb,EAAmB;AACjBhB,YAAAA,OAAO,CAAC2B,IAAR,CAAahB,SAAb;AACD;AACF,SAlBD;;AAoBA,QAAA,MAAI,CAACpB,QAAL,CAAc;AAAEP,UAAAA,MAAM,EAAEgB;AAAV,SAAd;AACD,OA1BH;AA2BD;;;iCAKYlB,G,EAAKC,I,EAAM6C,M,EAAQC,I,EAAMC,M,EAAQ;AAC5C1C,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,UAAM0C,OAAO,kEAAb;AACA,UAAMN,QAAQ,iBAAe3C,GAAf,SAAsBC,IAAtB,gBAAqC6C,MAAnD;AACA,UAAMI,QAAQ,eAAaH,IAA3B;AACA,UAAMI,GAAG,aAAWH,MAApB;AACA,kBAAUC,OAAV,GAAoBN,QAApB,GAA+BO,QAA/B,GAA0CC,GAA1C;AAGD;;;6BAEQ;AAAA,yBACuB,KAAKpD,KAD5B;AAAA,UACCC,GADD,gBACCA,GADD;AAAA,UACMC,IADN,gBACMA,IADN;AAAA,UACYC,MADZ,gBACYA,MADZ;AAEP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEP,MAAM,CAACyD,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB3D,MAAM,CAAC4D,SAA/B,GAA2C5D,MAAM,CAAC6D,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAY,QAAA,UAAU,EAAE,KAAK1D,KAAL,CAAWU,UAAnC;AAA+C,QAAA,OAAO,EAAE,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF;AAyCD;;;;EA5IqBjB,S;;AAAlBM,S,CAEG4D,iB,GAAoB,UAAA3D,KAAK,EAAI;AAElC,MAAM4D,SAAS,GAAG,UAAlB;AACA,SAAO;AAAEC,IAAAA,WAAW,EAAED,SAAS,CAACE,WAAV;AAAf,GAAP;AACD,C;;AAyIH,eAAe/D,SAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\r\nimport { View, ScrollView } from \"react-native\";\r\nimport PlaceList from \"../Place/PlaceList\";\r\nimport styles from \"./styles\";\r\nimport HeaderMenu from \"../../component/Menu/HeaderMenu\"\r\n\r\nclass MapScreen extends Component {\r\n  //Set the HeaderTitle screen\r\n  static navigationOptions = props => {\r\n    // const placeName = props.navigation.getParam(\"placeName\");\r\n    const placeName = 'Pharmacy';\r\n    return { headerTitle: placeName.toUpperCase() };\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    //Initial State\r\n    this.state = {\r\n      lat: 48.858453,\r\n      long: 2.294489,\r\n      places: [],\r\n      isLoading: false,\r\n      placeType: \"pharmacy\"\r\n    };\r\n\r\n    this.GOOGLE_API_KEY = \"AIzaSyBOoJBp0W8ksY21rV4yAGoHHCSaJRVyibs\";\r\n  }\r\n  \r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    const { navigation } = this.props;\r\n    // const placeType = navigation.getParam(\"placeType\");\r\n    const placeType = 'pharmacy';\r\n    this.setState({ placeType: placeType });\r\n\r\n      // this.getCurrentLocation();\r\n  }\r\n\r\n  /**\r\n   * Get current user's position\r\n   */\r\n  getCurrentLocation() {\r\n    console.log('Get current location');\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      const lat = position.coords.latitude;\r\n      const long = position.coords.longitude;\r\n      this.setState({ lat: lat, long: long });\r\n      console.log(this.state);\r\n      this.getPlaces();\r\n    });\r\n  }\r\n\r\n  getPlaces() {\r\n    console.log('get places');\r\n    const { lat, long, placeType } = this.state;\r\n    const markers = [];\r\n    const url = this.getPlacesUrl(lat, long, 4000, placeType, this.GOOGLE_API_KEY);\r\n    console.log('Get Places from ', url)\r\n    // const url = this.getPlacesUrl(lat, long, 2000, 'pharmacy', this.GOOGLE_API_KEY);\r\n    // const url = this.getPlacesUrl(-21.455028, 47.090339, 9000, 'pharmacy', this.GOOGLE_API_KEY);\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        console.log('resultat');\r\n        console.log(res);\r\n        res.results.map((element, index) => {\r\n          const marketObj = {};\r\n          marketObj.id = element.id;\r\n          marketObj.name = element.name;\r\n          marketObj.icon = element.icon;\r\n          marketObj.photos = element.photos ? element.photos : '';\r\n          marketObj.open = element.opening_hours ? element.opening_hours.open_now : true;\r\n          marketObj.rating = element.rating;\r\n          marketObj.placeId = element.place_id;\r\n          marketObj.vicinity = element.vicinity;\r\n          marketObj.marker = {\r\n            latitude: element.geometry.location.lat,\r\n            longitude: element.geometry.location.lng\r\n          };\r\n\r\n          if(marketObj.open) {\r\n            markers.push(marketObj);\r\n          }\r\n        });\r\n        //update our places array\r\n        this.setState({ places: markers });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get the Place URL\r\n   */\r\n  getPlacesUrl(lat, long, radius, type, apiKey) {\r\n    console.log('Get place Url')\r\n    const baseUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?`;\r\n    const location = `location=${lat},${long}&radius=${radius}`;\r\n    const typeData = `&types=${type}`;\r\n    const api = `&key=${apiKey}`;\r\n    return `${baseUrl}${location}${typeData}${api}`;\r\n\r\n    // https://www.google.fr/maps/search/Pharmacie+de+garde,+Fianarantsoa,+MADAGASCAR/@-19.789516,46.00493,7z/data=!3m1!4b1\r\n  }\r\n\r\n  render() {\r\n    const { lat, long, places } = this.state;\r\n    return (\r\n      <View style={styles.container}>\r\n        <View style={Platform.OS === 'ios' ? styles.under_ios : styles.under}>\r\n          <HeaderMenu navigation={this.props.navigation} mapview={1}/>\r\n        </View>\r\n\r\n        {/**\r\n                    <View style={styles.mapView}>\r\n              <MapView\r\n              style={{\r\n                flex: 1\r\n              }}\r\n              provider={PROVIDER_GOOGLE}\r\n              region={{\r\n                latitude: lat,\r\n                longitude: long,\r\n                latitudeDelta: 0.0922,\r\n                longitudeDelta: 0.0421\r\n              }}\r\n            >\r\n              {places.map((marker, i) => (\r\n                <MapView.Marker\r\n                  key={i}\r\n                  coordinate={{\r\n                    latitude: marker.marker.latitude,\r\n                    longitude: marker.marker.longitude\r\n                  }}\r\n                  title={marker.name}\r\n                />\r\n              ))}\r\n            </MapView>\r\n          </View>\r\n\r\n          <View style={styles.placeList}>\r\n          {\r\n            places.length > 0 ? <PlaceList places={places}/> : null\r\n          }\r\n          </View>\r\n        */}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapScreen;\r\n"]},"metadata":{},"sourceType":"module"}