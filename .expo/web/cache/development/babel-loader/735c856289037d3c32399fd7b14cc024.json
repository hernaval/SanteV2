{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Notifications } from 'expo';\nimport * as Permissions from 'expo-permissions';\nimport Constants from 'expo-constants';\nimport axios from 'axios';\nimport Bdd from \"../API/Bdd\";\nexport var registerForPushNotificationsAsync = function registerForPushNotificationsAsync(id) {\n  var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status, token, data;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('ça part de la ');\n\n          if (!Constants.isDevice) {\n            _context.next = 25;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 4:\n          _await$Permissions$ge = _context.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context.next = 13;\n            break;\n          }\n\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 10:\n          _await$Permissions$as = _context.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 13:\n          if (!(finalStatus !== 'granted')) {\n            _context.next = 16;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context.abrupt(\"return\");\n\n        case 16:\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 18:\n          token = _context.sent;\n          console.log('l uuid token', token);\n          data = {\n            uuid: token,\n            id: id\n          };\n          console.log('l uuid data', data);\n          axios.post(Bdd.api_url + '/api/user/updateUuid', data).then(function (res) {\n            console.log('l uuid token 2', res);\n          }).catch(function (err) {\n            console.log('err', err);\n          });\n          _context.next = 26;\n          break;\n\n        case 25:\n          alert('Must use physical device for Push Notifications');\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/Stenny Gabriel/best4sante/Best4Sante/assets/services/notifications.js"],"names":["Notifications","Permissions","Constants","axios","Bdd","registerForPushNotificationsAsync","id","console","log","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","token","data","uuid","post","api_url","then","res","catch","err"],"mappings":";AAAA,SAASA,aAAT,QAA8B,MAA9B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP;AAEA,OAAO,IAAMC,iCAAiC,GAAG,SAApCA,iCAAoC,CAAOC,EAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC/CC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AAD+C,eAEzCN,SAAS,CAACO,QAF+B;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAGFR,WAAW,CAACS,QAAZ,CACvCT,WAAW,CAACU,aAD2B,CAHE;;AAAA;AAAA;AAG3BC,UAAAA,cAH2B,yBAGnCC,MAHmC;AAMvCC,UAAAA,WANuC,GAMzBF,cANyB;;AAAA,gBAOvCA,cAAc,KAAK,SAPoB;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAQhBX,WAAW,CAACc,QAAZ,CACvBd,WAAW,CAACU,aADW,CARgB;;AAAA;AAAA;AAQjCE,UAAAA,MARiC,yBAQjCA,MARiC;AAWzCC,UAAAA,WAAW,GAAGD,MAAd;;AAXyC;AAAA,gBAavCC,WAAW,KAAK,SAbuB;AAAA;AAAA;AAAA;;AAczCE,UAAAA,KAAK,CAAC,iDAAD,CAAL;AAdyC;;AAAA;AAAA;AAAA,2CAiBzBhB,aAAa,CAACiB,qBAAd,EAjByB;;AAAA;AAiBvCC,UAAAA,KAjBuC;AAkB3CX,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BU,KAA5B;AAEIC,UAAAA,IApBuC,GAoBhC;AACTC,YAAAA,IAAI,EAAEF,KADG;AAETZ,YAAAA,EAAE,EAAEA;AAFK,WApBgC;AAwB3CC,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BW,IAA3B;AACAhB,UAAAA,KAAK,CAACkB,IAAN,CAAWjB,GAAG,CAACkB,OAAJ,GAAY,sBAAvB,EAA+CH,IAA/C,EACCI,IADD,CACM,UAACC,GAAD,EAAO;AACXjB,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BgB,GAA7B;AACD,WAHD,EAGGC,KAHH,CAGS,UAACC,GAAD,EAAO;AACdnB,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBkB,GAAlB;AAED,WAND;AAzB2C;AAAA;;AAAA;AAoC3CV,UAAAA,KAAK,CAAC,iDAAD,CAAL;;AApC2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1C","sourcesContent":["import { Notifications } from 'expo';\r\nimport * as Permissions from 'expo-permissions';\r\nimport Constants from 'expo-constants';\r\nimport axios from 'axios';\r\nimport Bdd from '../API/Bdd'\r\n\r\nexport const registerForPushNotificationsAsync = async (id) => {\r\n  console.log('ça part de la ');\r\n    if (Constants.isDevice) {\r\n      const { status: existingStatus } = await Permissions.getAsync(\r\n        Permissions.NOTIFICATIONS\r\n      );\r\n      let finalStatus = existingStatus;\r\n      if (existingStatus !== 'granted') {\r\n        const { status } = await Permissions.askAsync(\r\n          Permissions.NOTIFICATIONS\r\n        );\r\n        finalStatus = status;\r\n      }\r\n      if (finalStatus !== 'granted') {\r\n        alert('Failed to get push token for push notification!');\r\n        return;\r\n      }\r\n      let token = await Notifications.getExpoPushTokenAsync();\r\n      console.log('l uuid token', token);\r\n\r\n      let data = {\r\n        uuid: token,\r\n        id: id\r\n      }\r\n      console.log('l uuid data', data);\r\n      axios.post(Bdd.api_url+'/api/user/updateUuid', data )\r\n      .then((res)=>{\r\n        console.log('l uuid token 2',res)\r\n      }).catch((err)=>{\r\n        console.log('err',err);\r\n\r\n      })\r\n\r\n\r\n\r\n    } else {\r\n      alert('Must use physical device for Push Notifications');\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}